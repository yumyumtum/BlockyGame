<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Dodge Game Evolved</title>
  <style>
    body {
      margin: 0;
      overflow: hidden;
      background: #111;
      color: white;
      font-family: Arial, sans-serif;
    }

    canvas {
      display: block;
      margin: 0 auto;
      background: #222;
      border: 2px solid #fff;
    }

    #menu {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      color: white;
      background-color: rgba(0, 0, 0, 0.8);
      padding: 40px;
      border: 2px solid white;
      text-align: center;
      display: none;
    }

    #menu h1 {
      margin-bottom: 20px;
    }

    .menu-button {
      display: block;
      width: 200px;
      margin: 10px auto;
      padding: 10px;
      font-size: 18px;
      background: #333;
      color: white;
      border: 2px solid white;
      cursor: pointer;
    }

    .menu-button:hover {
      background: #555;
    }
  </style>
</head>
<body>
  <canvas id="gameCanvas" width="400" height="600"></canvas>
  <div id="menu">
    <h1>Game Over</h1>
    <p id="finalScore"></p>
    <button class="menu-button" onclick="restartGame()">Restart</button>
    <button class="menu-button" onclick="quitGame()">Quit</button>
  </div>

  <!-- Zelda theme audio -->
  <audio id="zeldaTheme" src="https://vgmsite.com/soundtracks/legend-of-zelda-ocarina-of-time/swjwnvym/101%20-%20Title%20Theme.mp3" preload="auto"></audio>

  <script>
    const canvas = document.getElementById('gameCanvas');
    const ctx = canvas.getContext('2d');
    const menu = document.getElementById('menu');
    const finalScore = document.getElementById('finalScore');
    const music = document.getElementById('zeldaTheme');

    let player, blocks, score, keys, highScore = 0;
    let arrows = [], missiles = [], explosions = [];
    let gameRunning = true;
    let spawnInterval;
    let warningTimer = 0;
    let startTime;

    function initGame() {
      music.currentTime = 0;
      music.play().catch(e => console.log("Autoplay blocked:", e));

      player = { x: 180, y: 550, width: 40, height: 40, speed: 5, health: 2, level: 0 };
      blocks = [];
      arrows = [];
      missiles = [];
      explosions = [];
      score = 0;
      keys = {};
      warningTimer = 0;
      gameRunning = true;
      menu.style.display = 'none';
      startTime = Date.now();
      clearInterval(spawnInterval);
      spawnInterval = setInterval(spawnBlock, 800);
      gameLoop();
    }

    document.addEventListener('keydown', (e) => {
      keys[e.key] = true;
      if (e.key === '5' && player.level >= 5) arrows.push({ x: player.x + player.width/2 -2, y: player.y, width: 4, height:10, speed:7, color:'yellow' });
      if (e.key === '1' && player.level >= 10) missiles.push({ x: player.x + player.width/2 -5, y: player.y, width:10, height:20, speed:5, color:'orange' });
    });
    document.addEventListener('keyup', (e) => keys[e.key] = false);

    function drawPlayer() {
      const cx = player.x + player.width / 2;
      const cy = player.y + player.height / 2;
      const radius = player.width / 2;
      ctx.fillStyle = 'yellow';
      ctx.beginPath();
      ctx.arc(cx, cy, radius, 0, Math.PI * 2);
      ctx.fill();
      ctx.fillStyle = 'black';
      ctx.beginPath();
      ctx.arc(cx - radius / 3, cy - radius / 5, radius / 8, 0, Math.PI * 2);
      ctx.arc(cx + radius / 3, cy - radius / 5, radius / 8, 0, Math.PI * 2);
      ctx.fill();
      ctx.beginPath();
      ctx.arc(cx, cy + radius / 8, radius / 3, 0, Math.PI);
      ctx.strokeStyle = 'black';
      ctx.lineWidth = 2;
      ctx.stroke();
    }

    function spawnBlock() {
      const now = Date.now();
      const elapsed = now - startTime;
      const typeRand = Math.random();
      let block = { x: Math.random() * (canvas.width - 30), y: -30, width:30, height:30, speed:2 + Math.random()*2 };
      if (typeRand < 0.6) {
        block.type = 'red'; block.color = 'red';
      } else if (typeRand < 0.85) {
        block.type = 'blue'; block.color = 'blue';
      } else {
        block.type = 'green';
        block.color = elapsed < 60000 ? 'green' : 'orange';
      }
      blocks.push(block);
    }

    function checkCollision(a, b) {
      return a.x < b.x + b.width && a.x + a.width > b.x &&
             a.y < b.y + b.height && a.y + a.height > b.y;
    }

    function updateBlocks() {
      const now = Date.now();
      const elapsed = now - startTime;
      for (let i = 0; i < blocks.length; i++) {
        const block = blocks[i]; block.y += block.speed;
        if (checkCollision(player, block)) {
          if (block.type === 'red') {
            const damage = elapsed >= 30000 ? 1.5 : 1;
            player.health -= damage;
            warningTimer = 60;
            blocks.splice(i, 1); i--;
            if (player.health <= 0) { endGame('You died!'); return; }
          } else if (block.type === 'blue') {
            player.level++; player.health = Math.min(player.health + 1, 2);
            blocks.splice(i, 1); i--;
          } else if (block.type === 'green') {
            endGame('Hit by forbidden block!'); return;
          }
        }
        if (block.y > canvas.height) { blocks.splice(i, 1); i--; score++; }
      }
    }

    function movePlayer() {
      if (keys['ArrowLeft'] && player.x > 0) player.x -= player.speed;
      if (keys['ArrowRight'] && player.x + player.width < canvas.width) player.x += player.speed;
      if (keys['ArrowUp'] && player.y > 0) player.y -= player.speed;
      if (keys['ArrowDown'] && player.y + player.height < canvas.height) player.y += player.speed;
    }

    function updateProjectiles() {
      for (let i = 0; i < arrows.length; i++) {
        arrows[i].y -= arrows[i].speed;
        for (let j = 0; j < blocks.length; j++) {
          if (checkCollision(arrows[i], blocks[j])) { blocks.splice(j,1); arrows.splice(i,1); i--; break; }
        }
        if (arrows[i] && arrows[i].y < 0) { arrows.splice(i,1); i--; }
      }
      for (let i = 0; i < missiles.length; i++) {
        missiles[i].y -= missiles[i].speed;
        for (let j = 0; j < blocks.length; j++) {
          if (checkCollision(missiles[i], blocks[j])) {
            explosions.push({ x: blocks[j].x + blocks[j].width/2, y: blocks[j].y + blocks[j].height/2, radius:10, alpha:1 });
            blocks.splice(j,1); missiles.splice(i,1); i--; break;
          }
        }
        if (missiles[i] && missiles[i].y < 0) { missiles.splice(i,1); i--; }
      }
    }

    function updateExplosions() {
      for (let i = 0; i < explosions.length; i++) {
        const ex = explosions[i]; ex.radius += 2; ex.alpha -= 0.05;
        if (ex.alpha <= 0) { explosions.splice(i,1); i--; }
      }
    }

    function drawProjectiles() {
      arrows.forEach(a => { ctx.fillStyle = a.color; ctx.fillRect(a.x, a.y, a.width, a.height); });
      missiles.forEach(m => { ctx.fillStyle = m.color; ctx.fillRect(m.x, m.y, m.width, m.height); });
    }

    function drawExplosions() {
      explosions.forEach(ex => {
        ctx.beginPath();
        ctx.arc(ex.x, ex.y, ex.radius, 0, Math.PI*2);
        ctx.fillStyle = `rgba(255,165,0,${ex.alpha})`;
        ctx.fill();
      });
    }

    function drawHUD() {
      ctx.fillStyle = 'white'; ctx.font = '16px Arial';
      ctx.fillText('Score: ' + score, 10, 20);
      ctx.fillText('Health: ' + Math.max(player.health, 0).toFixed(1), 10, 40);
      ctx.fillText('Level: ' + player.level, 10, 60);
    }

    function drawWarning() {
      if (warningTimer > 0) {
        ctx.fillStyle = 'red'; ctx.font = 'bold 24px Arial';
        ctx.fillText('WARNING', 10, 90);
        warningTimer--;
      }
    }

    function endGame(message) {
      gameRunning = false; clearInterval(spawnInterval); highScore = Math.max(highScore, score);
      finalScore.innerHTML = `${message}<br>Score: ${score}<br>High Score: ${highScore}`;
      menu.style.display = 'block';
    }

    function restartGame() { initGame(); }
    function quitGame() {
      menu.style.display='none';
      ctx.fillStyle='black';
      ctx.fillRect(0,0,canvas.width,canvas.height);
    }

    function gameLoop() {
      const now = Date.now(); const elapsed = now - startTime;
      if (elapsed >= 600000) {
        clearInterval(spawnInterval); gameRunning = false;
        ctx.fillStyle = 'black'; ctx.fillRect(0,0,canvas.width,canvas.height);
        ctx.fillStyle = 'white'; ctx.font = 'bold 20px Arial'; ctx.textAlign = 'center';
        ctx.fillText('THANKS TO SKYE YAN FOR MAKING THIS GAME', canvas.width/2, canvas.height/2);
        return;
      }
      if (!gameRunning) return;
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      movePlayer(); updateBlocks(); updateProjectiles(); updateExplosions();
      drawPlayer(); blocks.forEach(b => { ctx.fillStyle = b.color; ctx.fillRect(b.x, b.y, b.width, b.height); });
      drawProjectiles(); drawExplosions(); drawHUD(); drawWarning();
      requestAnimationFrame(gameLoop);
    }

    initGame();
  </script>
</body>
</html>
